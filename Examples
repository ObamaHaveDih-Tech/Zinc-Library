--[[
    Modern UI Library - Standalone Demo Script
    
    This is a complete demonstration script that showcases all features
    of the Modern UI Library.
    
    Usage:
    1. Load the library first
    2. Run this demo script
    
    Example:
    local Library = loadstring(game:HttpGet("YOUR_GITHUB_LINK_HERE"))()
    -- Then paste this demo script below
]]

-- Load the library from Pastebin with error checking
local Library
local success, err = pcall(function()
    local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/ObamaHaveDih-Tech/Zinc-Library/refs/heads/main/Source.lua"))()
```

This points directly to your GitHub repository's `Source.lua` file, which should contain the main library code (the first artifact).

## 📦 **Repository Structure Recommendation:**
```
Zinc-Library/
├── Source.lua              (Main library - Artifact 1)
├── Demo.lua                (Demo script - Artifact 2)
├── AdvancedExample.lua     (Advanced example - Artifact 3)
├── README.md               (GitHub README - Artifact 6)
├── DOCUMENTATION.md        (Full docs - Artifact 5)
└── QUICK_REFERENCE.md      (Quick ref - Artifact 4)
end)

if not success then
    warn("Failed to load library:", err)
    return
end

if not Library then
    warn("Library loaded but returned nil. Check if the Pastebin content is correct.")
    return
end

if not Library.CreateWindow then
    warn("Library loaded but CreateWindow function not found. Library may be incomplete.")
    return
end

print("✓ Library loaded successfully!")

-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
print("  Modern UI Library v1.0 - Demo Script")
print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")

-- Create the main window
local Window = Library:CreateWindow({
    Name = "Modern UI Demo v1.0",
    Theme = "Dark" -- Options: "Dark", "Serenity", "Forest", "Mocha", "Crimson", "Ocean", "Royal"
})

print("✓ Window created!")

-- ═══════════════════════════════════════════════════════════════
-- TAB 1: MAIN FEATURES
-- ═══════════════════════════════════════════════════════════════
local MainTab = Window:CreateTab("Main")

MainTab:CreateLabel({
    Text = "Welcome! This demo showcases all UI components."
})

MainTab:CreateButton({
    Name = "Test Notification",
    Callback = function()
        print("Button clicked!")
        Window:Notify({
            Title = "Success!",
            Message = "Button callback executed successfully.",
            Duration = 3,
            Type = "Success"
        })
    end
})

MainTab:CreateButton({
    Name = "Test All Notifications",
    Callback = function()
        Window:Notify({
            Title = "Info",
            Message = "This is an info notification",
            Duration = 3,
            Type = "Info"
        })
        
        task.wait(0.5)
        
        Window:Notify({
            Title = "Success",
            Message = "This is a success notification",
            Duration = 3,
            Type = "Success"
        })
        
        task.wait(0.5)
        
        Window:Notify({
            Title = "Warning",
            Message = "This is a warning notification",
            Duration = 3,
            Type = "Warning"
        })
        
        task.wait(0.5)
        
        Window:Notify({
            Title = "Error",
            Message = "This is an error notification",
            Duration = 3,
            Type = "Error"
        })
    end
})

local testToggle = MainTab:CreateToggle({
    Name = "Example Toggle",
    Default = false,
    Callback = function(value)
        print("Toggle state:", value)
        Window:Notify({
            Title = "Toggle Update",
            Message = "State: " .. tostring(value),
            Duration = 2,
            Type = "Info"
        })
    end
})

-- Dropdown demo
local selectedWeapon = MainTab:CreateDropdown({
    Name = "Select Weapon",
    Options = {"Sword", "Bow", "Staff", "Axe", "Dagger"},
    Default = "Sword",
    Callback = function(value)
        print("Selected weapon:", value)
        Window:Notify({
            Title = "Weapon Changed",
            Message = "Now using: " .. value,
            Duration = 2,
            Type = "Info"
        })
    end
})

local walkspeedSlider = MainTab:CreateSlider({
    Name = "Walkspeed",
    Range = {16, 100},
    Default = 16,
    Callback = function(value)
        local player = Players.LocalPlayer
        if player and player.Character and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid.WalkSpeed = value
        end
    end
})

MainTab:CreateTextInput({
    Name = "Text Input Demo",
    PlaceholderText = "Type and press Enter...",
    Callback = function(text)
        print("User entered:", text)
        Window:Notify({
            Title = "Text Received",
            Message = text,
            Duration = 3,
            Type = "Success"
        })
    end
})

MainTab:CreateButton({
    Name = "Reset Walkspeed",
    Callback = function()
        walkspeedSlider:SetValue(16)
        print("Walkspeed reset")
    end
})

-- ═══════════════════════════════════════════════════════════════
-- TAB 2: PLAYER MODIFICATIONS
-- ═══════════════════════════════════════════════════════════════
local PlayerTab = Window:CreateTab("Player")

PlayerTab:CreateLabel({
    Text = "Modify your character's properties"
})

PlayerTab:CreateSlider({
    Name = "Jump Power",
    Range = {50, 200},
    Default = 50,
    Callback = function(value)
        local player = Players.LocalPlayer
        if player and player.Character and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid.JumpPower = value
        end
    end
})

local infiniteJumpEnabled = false
PlayerTab:CreateToggle({
    Name = "Infinite Jump",
    Default = false,
    Callback = function(value)
        infiniteJumpEnabled = value
    end
})

UserInputService.JumpRequest:Connect(function()
    if infiniteJumpEnabled then
        local player = Players.LocalPlayer
        if player and player.Character and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end
end)

local noclipEnabled = false
local noclipConnection

PlayerTab:CreateToggle({
    Name = "Noclip",
    Default = false,
    Callback = function(value)
        noclipEnabled = value
        
        if noclipEnabled then
            noclipConnection = RunService.Stepped:Connect(function()
                local player = Players.LocalPlayer
                if player and player.Character then
                    for _, part in pairs(player.Character:GetDescendants()) do
                        if part:IsA("BasePart") then
                            part.CanCollide = false
                        end
                    end
                end
            end)
        else
            if noclipConnection then
                noclipConnection:Disconnect()
            end
            
            local player = Players.LocalPlayer
            if player and player.Character then
                for _, part in pairs(player.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = true
                    end
                end
            end
        end
    end
})

PlayerTab:CreateSlider({
    Name = "Field of View",
    Range = {70, 120},
    Default = 70,
    Callback = function(value)
        workspace.CurrentCamera.FieldOfView = value
    end
})

PlayerTab:CreateButton({
    Name = "Respawn Character",
    Callback = function()
        local player = Players.LocalPlayer
        if player and player.Character then
            player.Character:BreakJoints()
        end
    end
})

-- ═══════════════════════════════════════════════════════════════
-- TAB 3: VISUAL EFFECTS
-- ═══════════════════════════════════════════════════════════════
local VisualTab = Window:CreateTab("Visual")

VisualTab:CreateLabel({
    Text = "Visual modifications and effects"
})

-- Dropdown for visual presets
VisualTab:CreateDropdown({
    Name = "Visual Preset",
    Options = {"Default", "Performance", "Quality", "Cinematic"},
    Default = "Default",
    Callback = function(value)
        print("Visual preset:", value)
        Window:Notify({
            Title = "Preset Applied",
            Message = "Switched to " .. value .. " mode",
            Duration = 2,
            Type = "Success"
        })
    end
})

local fullbrightEnabled = false
local originalAmbient
local originalBrightness

VisualTab:CreateToggle({
    Name = "Fullbright",
    Default = false,
    Callback = function(value)
        fullbrightEnabled = value
        local lighting = game:GetService("Lighting")
        
        if fullbrightEnabled then
            originalAmbient = lighting.Ambient
            originalBrightness = lighting.Brightness
            lighting.Ambient = Color3.new(1, 1, 1)
            lighting.Brightness = 2
            lighting.OutdoorAmbient = Color3.new(1, 1, 1)
            Window:Notify({
                Title = "Fullbright",
                Message = "Fullbright enabled",
                Duration = 2,
                Type = "Success"
            })
        else
            if originalAmbient then
                lighting.Ambient = originalAmbient
            end
            if originalBrightness then
                lighting.Brightness = originalBrightness
            end
            Window:Notify({
                Title = "Fullbright",
                Message = "Fullbright disabled",
                Duration = 2,
                Type = "Info"
            })
        end
    end
})

VisualTab:CreateSlider({
    Name = "Character Transparency",
    Range = {0, 100},
    Default = 0,
    Callback = function(value)
        local transparency = value / 100
        local player = Players.LocalPlayer
        
        if player and player.Character then
            for _, part in pairs(player.Character:GetDescendants()) do
                if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                    part.Transparency = transparency
                    if part.Name == "Head" then
                        part.face.Transparency = transparency
                    end
                end
            end
        end
    end
})

VisualTab:CreateButton({
    Name = "Remove Fog",
    Callback = function()
        local lighting = game:GetService("Lighting")
        lighting.FogEnd = 100000
        lighting.FogStart = 0
        Window:Notify({
            Title = "Fog Removed",
            Message = "Environmental fog has been cleared.",
            Duration = 2,
            Type = "Success"
        })
    end
})

VisualTab:CreateButton({
    Name = "Remove Shadows",
    Callback = function()
        local lighting = game:GetService("Lighting")
        lighting.GlobalShadows = false
        Window:Notify({
            Title = "Shadows Removed",
            Message = "All shadows have been disabled.",
            Duration = 2,
            Type = "Success"
        })
    end
})

-- ═══════════════════════════════════════════════════════════════
-- TAB 4: TESTING & EXAMPLES
-- ═══════════════════════════════════════════════════════════════
local TestTab = Window:CreateTab("Examples")

TestTab:CreateLabel({
    Text = "Interactive examples and component tests"
})

-- Dropdown example with dynamic options
local fruitDropdown = TestTab:CreateDropdown({
    Name = "Select Fruit",
    Options = {"Apple", "Banana", "Orange", "Grape", "Mango"},
    Default = "Apple",
    Callback = function(value)
        print("Selected fruit:", value)
    end
})

TestTab:CreateButton({
    Name = "Add Strawberry to Fruits",
    Callback = function()
        fruitDropdown:Refresh({"Apple", "Banana", "Orange", "Grape", "Mango", "Strawberry"})
        Window:Notify({
            Title = "Dropdown Updated",
            Message = "Strawberry has been added!",
            Duration = 2,
            Type = "Success"
        })
    end
})

local counter = 0
local counterLabel = TestTab:CreateLabel({
    Text = "Counter: 0"
})

TestTab:CreateButton({
    Name = "Increment Counter (+1)",
    Callback = function()
        counter = counter + 1
        counterLabel:SetText("Counter: " .. tostring(counter))
    end
})

TestTab:CreateButton({
    Name = "Decrement Counter (-1)",
    Callback = function()
        counter = counter - 1
        counterLabel:SetText("Counter: " .. tostring(counter))
    end
})

TestTab:CreateButton({
    Name = "Reset Counter",
    Callback = function()
        counter = 0
        counterLabel:SetText("Counter: 0")
    end
})

local savedText = ""
local savedTextLabel = TestTab:CreateLabel({
    Text = "No text saved"
})

TestTab:CreateTextInput({
    Name = "Save Text",
    PlaceholderText = "Enter text to save...",
    Callback = function(text)
        savedText = text
        savedTextLabel:SetText("Saved: " .. text)
    end
})

TestTab:CreateToggle({
    Name = "Option A",
    Default = false,
    Callback = function(value)
        print("Option A:", value)
    end
})

TestTab:CreateToggle({
    Name = "Option B",
    Default = true,
    Callback = function(value)
        print("Option B:", value)
    end
})

TestTab:CreateSlider({
    Name = "Value Range",
    Range = {0, 10},
    Default = 5,
    Callback = function(value)
        print("Value:", value)
    end
})

-- ═══════════════════════════════════════════════════════════════
-- TAB 5: INFO & SETTINGS
-- ═══════════════════════════════════════════════════════════════
local InfoTab = Window:CreateTab("Info")

InfoTab:CreateLabel({
    Text = "Library Information & Credits"
})

InfoTab:CreateLabel({
    Text = "Version: 1.0.0"
})

InfoTab:CreateLabel({
    Text = "Compatible with all client-side executors"
})

InfoTab:CreateLabel({
    Text = "━━━━━━━━━━━━━━━━━━━━━━━"
})

InfoTab:CreateLabel({
    Text = "Available Themes:"
})

InfoTab:CreateDropdown({
    Name = "Theme Selector",
    Options = {"Dark", "Serenity", "Forest", "Mocha", "Crimson"},
    Default = "Dark",
    Callback = function(value)
        Window:Notify({
            Title = "Theme Info",
            Message = "Set Theme='" .. value .. "' when creating window to use this theme!",
            Duration = 5,
            Type = "Info"
        })
    end
})

InfoTab:CreateButton({
    Name = "Dark Theme Info",
    Callback = function()
        Window:Notify({
            Title = "Dark Theme",
            Message = "Modern dark theme with blue accents - Default theme",
            Duration = 4,
            Type = "Info"
        })
    end
})

InfoTab:CreateButton({
    Name = "Serenity Theme Info",
    Callback = function()
        Window:Notify({
            Title = "Serenity Theme",
            Message = "Clean white theme for light mode lovers",
            Duration = 4,
            Type = "Info"
        })
    end
})

InfoTab:CreateButton({
    Name = "Forest Theme Info",
    Callback = function()
        Window:Notify({
            Title = "Forest Theme",
            Message = "Nature-inspired green theme",
            Duration = 4,
            Type = "Info"
        })
    end
})

InfoTab:CreateButton({
    Name = "Mocha Theme Info",
    Callback = function()
        Window:Notify({
            Title = "Mocha Theme",
            Message = "Warm earthy tones with sage and terracotta accents",
            Duration = 4,
            Type = "Info"
        })
    end
})

InfoTab:CreateButton({
    Name = "Crimson Theme Info",
    Callback = function()
        Window:Notify({
            Title = "Crimson Theme",
            Message = "Bold red theme with dark background",
            Duration = 4,
            Type = "Info"
        })
    end
})

InfoTab:CreateLabel({
    Text = "━━━━━━━━━━━━━━━━━━━━━━━"
})

local fpsLabel = InfoTab:CreateLabel({
    Text = "FPS: Calculating..."
})

spawn(function()
    local lastUpdate = tick()
    local frames = 0
    
    RunService.RenderStepped:Connect(function()
        frames = frames + 1
        
        if tick() - lastUpdate >= 1 then
            pcall(function()
                fpsLabel:SetText("FPS: " .. tostring(frames))
            end)
            frames = 0
            lastUpdate = tick()
        end
    end)
end)

InfoTab:CreateLabel({
    Text = "━━━━━━━━━━━━━━━━━━━━━━━"
})

InfoTab:CreateButton({
    Name = "Close UI",
    Callback = function()
        pcall(function()
            local CoreGui = game:GetService("CoreGui")
            local gui = CoreGui:FindFirstChild("ModernUILibrary")
            if not gui then
                gui = Players.LocalPlayer.PlayerGui:FindFirstChild("ModernUILibrary")
            end
            
            if gui then
                gui:Destroy()
                print("UI closed successfully")
            end
        end)
    end
})

-- Final notification
Window:Notify({
    Title = "UI Library Loaded!",
    Message = "Modern UI Library v1.0 is ready. Explore all tabs!",
    Duration = 5,
    Type = "Success"
})

print("✓ All tabs and components loaded successfully!")
print("✓ Demo complete!")
print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
